import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import warnings

warnings.filterwarnings('ignore')


class MortalityTableGenerator:
    def __init__(self):
        self.data = None
        self.mortality_table = None

    def read_excel_data(self, file_path, sheet_name=0):
        """
        Excel dosyasƒ±ndan mortalite verilerini okur

        Parameters:
        file_path (str): Excel dosyasƒ±nƒ±n yolu
        sheet_name (str/int): Sayfa adƒ± veya indeksi
        """
        try:
            # Excel dosyasƒ±nƒ± oku
            self.data = pd.read_excel(file_path, sheet_name=sheet_name)

            # S√ºtun isimlerini standartla≈ütƒ±r
            self.data.columns = self.data.columns.str.lower().str.strip()

            print(f"‚úÖ Excel dosyasƒ± ba≈üarƒ±yla okundu: {len(self.data)} satƒ±r")
            print(f"üìä Mevcut s√ºtunlar: {list(self.data.columns)}")

            return self.data

        except Exception as e:
            print(f"‚ùå Hata: Excel dosyasƒ± okunamadƒ± - {str(e)}")
            return None

    def validate_columns(self):
        """Gerekli s√ºtunlarƒ±n varlƒ±ƒüƒ±nƒ± kontrol eder"""

        # Alternatif s√ºtun isimleri
        column_mapping = {
            'ya≈ü': ['yas', 'age', 'ya≈ü', 'x'],
            'lx': ['lx', 'l(x)', 'survivors'],
            'qx': ['qx', 'q(x)', 'mortality_rate'],
            'dx': ['dx', 'd(x)', 'deaths']
        }

        mapped_columns = {}

        for standard_col, alternatives in column_mapping.items():
            found = False
            for alt in alternatives:
                if alt in self.data.columns:
                    mapped_columns[standard_col] = alt
                    found = True
                    break

            # Ya≈ü s√ºtunu mutlaka gerekli
            if standard_col == 'ya≈ü' and not found:
                print(f"‚ùå Ya≈ü s√ºtunu bulunamadƒ±! Aranacak isimler: {alternatives}")
                return False

            # qx s√ºtunu da gerekli (en azƒ±ndan)
            if standard_col == 'qx' and not found:
                print(f"‚ùå √ñl√ºm oranƒ± (qx) s√ºtunu bulunamadƒ±! Aranacak isimler: {alternatives}")
                return False

        # S√ºtunlarƒ± yeniden adlandƒ±r
        rename_dict = {v: k for k, v in mapped_columns.items() if k in mapped_columns}
        self.data.rename(columns=rename_dict, inplace=True)

        print("‚úÖ S√ºtunlar bulundu ve standartla≈ütƒ±rƒ±ldƒ±")
        print(f"üìã Kullanƒ±lacak s√ºtunlar: {list(mapped_columns.keys())}")
        return True

    def create_mortality_table(self, radix=100000):
        """
        Mortalite tablosunu olu≈üturur

        Parameters:
        radix (int): Ba≈ülangƒ±√ß ya≈üayan sayƒ±sƒ± (genellikle 100,000)
        """
        if self.data is None:
            print("‚ùå √ñnce Excel verisi okunmalƒ±!")
            return None

        if not self.validate_columns():
            return None

        # Veriyi kopyala
        df = self.data.copy()

        # Ya≈ü s√ºtununu sƒ±rala
        df = df.sort_values('ya≈ü').reset_index(drop=True)

        # Eksik s√ºtunlarƒ± olu≈ütur
        if 'lx' not in df.columns:
            df['lx'] = np.nan
        if 'dx' not in df.columns:
            df['dx'] = np.nan

        # Eksik hesaplamalarƒ± tamamla
        df = self._complete_calculations(df, radix)

        # Ek istatistiksel hesaplamalar
        df = self._add_life_table_functions(df)

        self.mortality_table = df

        print("‚úÖ Mortalite tablosu ba≈üarƒ±yla olu≈üturuldu!")
        return df

    def _complete_calculations(self, df, radix):
        """Eksik lx, qx, dx deƒüerlerini hesaplar"""

        # ƒ∞lk lx deƒüerini radix olarak ayarla (eƒüer yoksa)
        if pd.isna(df.iloc[0]['lx']):
            df.loc[0, 'lx'] = radix

        for i in range(len(df)):
            # lx hesaplama (√∂nceki lx - √∂nceki dx)
            if i > 0 and pd.isna(df.iloc[i]['lx']):
                if not pd.isna(df.iloc[i - 1]['lx']) and not pd.isna(df.iloc[i - 1]['dx']):
                    df.loc[i, 'lx'] = max(0, df.iloc[i - 1]['lx'] - df.iloc[i - 1]['dx'])

            # dx hesaplama (lx * qx)
            if pd.isna(df.iloc[i]['dx']) and not pd.isna(df.iloc[i]['qx']) and not pd.isna(df.iloc[i]['lx']):
                df.loc[i, 'dx'] = df.iloc[i]['lx'] * df.iloc[i]['qx']

            # qx hesaplama (dx / lx) - sadece eksikse
            if pd.isna(df.iloc[i]['qx']) and not pd.isna(df.iloc[i]['dx']) and not pd.isna(df.iloc[i]['lx']):
                if df.iloc[i]['lx'] > 0:
                    df.loc[i, 'qx'] = min(1.0, df.iloc[i]['dx'] / df.iloc[i]['lx'])
                else:
                    df.loc[i, 'qx'] = 0.0

        # Kalan eksik lx deƒüerlerini hesapla
        for i in range(1, len(df)):
            if pd.isna(df.iloc[i]['lx']) and not pd.isna(df.iloc[i - 1]['lx']) and not pd.isna(df.iloc[i - 1]['qx']):
                df.loc[i, 'lx'] = max(0, df.iloc[i - 1]['lx'] * (1 - df.iloc[i - 1]['qx']))

        return df

    def _add_life_table_functions(self, df):
        """Ek ya≈üam tablosu fonksiyonlarƒ±nƒ± hesaplar"""
        try:
            # px (ya≈üama olasƒ±lƒ±ƒüƒ±) = 1 - qx
            df['px'] = 1 - df['qx']

            # Lx (ya≈ü aralƒ±ƒüƒ±nda ya≈üanan yƒ±l sayƒ±sƒ±)
            df['Lx'] = df['lx'] - (df['dx'] / 2)

            # Tx (x ya≈üƒ±ndan sonra ya≈üanan toplam yƒ±l)
            df['Tx'] = df['Lx'][::-1].cumsum()[::-1]

            # ex (ya≈üam beklentisi)
            df['ex'] = np.where(df['lx'] > 0, df['Tx'] / df['lx'], 0)

            # NaN ve inf deƒüerlerini temizle
            df = df.replace([np.inf, -np.inf], np.nan)
            df = df.fillna(0)

        except Exception as e:
            print(f"‚ö†Ô∏è Ek hesaplamalarda hata: {str(e)}")

        return df

    def display_table(self, head=10):
        """Mortalite tablosunu g√∂r√ºnt√ºler"""
        if self.mortality_table is None:
            print("‚ùå √ñnce mortalite tablosu olu≈üturulmalƒ±!")
            return

        print(f"\nüìã Mortalite Tablosu (ƒ∞lk {head} satƒ±r):")
        print("=" * 80)

        # Sayƒ±sal deƒüerleri formatla
        display_df = self.mortality_table.head(head).copy()

        # Formatla
        for col in ['lx', 'dx', 'Lx', 'Tx']:
            if col in display_df.columns:
                display_df[col] = display_df[col].astype(float).round().astype(int)

        for col in ['qx', 'px', 'ex']:
            if col in display_df.columns:
                display_df[col] = display_df[col].astype(float).round(6)

        print(display_df.to_string(index=False))

    def save_to_excel(self, output_path="mortalite_tablosu.xlsx"):
        """Sonu√ßlarƒ± Excel'e kaydet"""
        if self.mortality_table is None:
            print("‚ùå Kaydedilecek tablo yok!")
            return False

        try:
            with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
                # Ana tablo
                save_df = self.mortality_table.copy()

                # Sayƒ±sal kolonlarƒ± d√ºzenle
                for col in ['lx', 'dx', 'Lx', 'Tx']:
                    if col in save_df.columns:
                        save_df[col] = save_df[col].astype(float).round().astype(int)

                for col in ['qx', 'px', 'ex']:
                    if col in save_df.columns:
                        save_df[col] = save_df[col].astype(float).round(6)

                save_df.to_excel(writer, sheet_name='Mortalite_Tablosu', index=False)

                # √ñzet istatistikler
                summary_data = {
                    'ƒ∞statistik': ['Toplam Ya≈ü Grubu', 'Ortalama Ya≈üam Beklentisi (0 ya≈ü)',
                                   'En Y√ºksek √ñl√ºm Oranƒ±', 'En D√º≈ü√ºk √ñl√ºm Oranƒ± (>0)', 'Medyan Ya≈üam Beklentisi'],
                    'Deƒüer': [
                        len(self.mortality_table),
                        f"{self.mortality_table.iloc[0]['ex']:.2f} yƒ±l" if 'ex' in self.mortality_table.columns else 'N/A',
                        f"{self.mortality_table['qx'].max():.6f}",
                        f"{self.mortality_table[self.mortality_table['qx'] > 0]['qx'].min():.6f}",
                        f"{self.mortality_table['ex'].median():.2f} yƒ±l" if 'ex' in self.mortality_table.columns else 'N/A'
                    ]
                }
                summary = pd.DataFrame(summary_data)
                summary.to_excel(writer, sheet_name='√ñzet', index=False)

            print(f"‚úÖ Mortalite tablosu kaydedildi: {output_path}")
            return True

        except Exception as e:
            print(f"‚ùå Kaydetme hatasƒ±: {str(e)}")
            return False

    def plot_mortality_curves(self):
        """Mortalite eƒürilerini √ßizer"""
        if self.mortality_table is None:
            print("‚ùå √ñnce mortalite tablosu olu≈üturulmalƒ±!")
            return

        try:
            # T√ºrk√ße karakter desteƒüi i√ßin font ayarƒ±
            plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial', 'sans-serif']

            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))

            # 1. Ya≈üayan sayƒ±sƒ± (lx)
            ax1.plot(self.mortality_table['ya≈ü'], self.mortality_table['lx'], 'b-', linewidth=2)
            ax1.set_title('Ya≈üayan Sayƒ±sƒ± (lx)', fontsize=12, fontweight='bold')
            ax1.set_xlabel('Ya≈ü')
            ax1.set_ylabel('Ya≈üayan Sayƒ±sƒ±')
            ax1.grid(True, alpha=0.3)
            ax1.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'{int(x):,}'))

            # 2. √ñl√ºm oranƒ± (qx)
            valid_qx = self.mortality_table[self.mortality_table['qx'] > 0]
            ax2.semilogy(valid_qx['ya≈ü'], valid_qx['qx'], 'r-', linewidth=2)
            ax2.set_title('√ñl√ºm Oranƒ± (qx) - Log √ñl√ßek', fontsize=12, fontweight='bold')
            ax2.set_xlabel('Ya≈ü')
            ax2.set_ylabel('√ñl√ºm Oranƒ± (log)')
            ax2.grid(True, alpha=0.3)

            # 3. √ñlen sayƒ±sƒ± (dx)
            ax3.plot(self.mortality_table['ya≈ü'], self.mortality_table['dx'], 'g-', linewidth=2)
            ax3.set_title('√ñlen Sayƒ±sƒ± (dx)', fontsize=12, fontweight='bold')
            ax3.set_xlabel('Ya≈ü')
            ax3.set_ylabel('√ñlen Sayƒ±sƒ±')
            ax3.grid(True, alpha=0.3)
            ax3.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'{int(x):,}'))

            # 4. Ya≈üam beklentisi (ex)
            if 'ex' in self.mortality_table.columns:
                ax4.plot(self.mortality_table['ya≈ü'], self.mortality_table['ex'], 'm-', linewidth=2)
                ax4.set_title('Ya≈üam Beklentisi (ex)', fontsize=12, fontweight='bold')
                ax4.set_xlabel('Ya≈ü')
                ax4.set_ylabel('Ya≈üam Beklentisi (yƒ±l)')
                ax4.grid(True, alpha=0.3)
            else:
                ax4.text(0.5, 0.5, 'Ya≈üam Beklentisi\nHesaplanamadƒ±',
                         horizontalalignment='center', verticalalignment='center',
                         transform=ax4.transAxes, fontsize=12)
                ax4.set_title('Ya≈üam Beklentisi (ex)', fontsize=12, fontweight='bold')

            plt.tight_layout()

            # Grafik dosyasƒ±nƒ± kaydet
            try:
                plt.savefig('mortalite_grafikleri.png', dpi=300, bbox_inches='tight')
                print("üìä Grafikler 'mortalite_grafikleri.png' olarak kaydedildi")
            except:
                pass

            plt.show()

        except Exception as e:
            print(f"‚ùå Grafik olu≈üturma hatasƒ±: {str(e)}")
            print("üí° ƒ∞pucu: matplotlib k√ºt√ºphanesinin y√ºkl√º olduƒüundan emin olun")


def create_sample_data_interactive():
    """Interaktif √∂rnek veri olu≈üturucu"""
    print("\nüìù Hangi t√ºr √∂rnek veri olu≈üturmak istersiniz?")
    print("1. Sadece qx (√∂l√ºm oranlarƒ±) - En basit")
    print("2. Ya≈ü + qx + lx - Standart format")
    print("3. Tam veri (ya≈ü, qx, lx, dx) - Eksiksiz")

    data_type = input("Se√ßiminiz (1-3): ").strip()

    ages = list(range(0, 101))

    try:
        if data_type == "1":
            # Sadece qx
            sample = pd.DataFrame({
                'ya≈ü': ages,
                'qx': [0.007 + (x / 100) ** 2 * 0.1 for x in ages]
            })
            filename = "ornek_qx_verisi.xlsx"

        elif data_type == "2":
            # qx + lx
            qx_vals = [min(0.95, 0.007 + (x / 100) ** 2 * 0.1) for x in ages]
            lx_vals = [100000]

            for i in range(1, len(ages)):
                new_lx = max(0, int(lx_vals[i - 1] * (1 - qx_vals[i - 1])))
                lx_vals.append(new_lx)

            sample = pd.DataFrame({
                'ya≈ü': ages,
                'qx': qx_vals,
                'lx': lx_vals
            })
            filename = "ornek_qx_lx_verisi.xlsx"

        else:
            # Tam veri
            qx_vals = [min(0.95, 0.007 + (x / 100) ** 2 * 0.1) for x in ages]
            lx_vals = [100000]
            dx_vals = []

            for i in range(len(ages)):
                if i == 0:
                    dx_vals.append(int(lx_vals[0] * qx_vals[0]))
                else:
                    new_lx = max(0, lx_vals[i - 1] - dx_vals[i - 1])
                    lx_vals.append(new_lx)
                    if i < len(ages) - 1:
                        dx_vals.append(int(new_lx * qx_vals[i]))
                    else:
                        dx_vals.append(new_lx)  # Son ya≈ü grubunda herkes √∂l√ºr

            sample = pd.DataFrame({
                'ya≈ü': ages,
                'qx': qx_vals,
                'lx': lx_vals,
                'dx': dx_vals
            })
            filename = "ornek_tam_veri.xlsx"

        sample.to_excel(filename, index=False)
        print(f"‚úÖ √ñrnek veri olu≈üturuldu: {filename}")
        return filename

    except Exception as e:
        print(f"‚ùå √ñrnek veri olu≈üturma hatasƒ±: {str(e)}")
        return None


def main():
    """Ana program"""
    print("üè• Mortalite Tablosu Olu≈üturucu")
    print("=" * 50)

    # Mortalite tablosu olu≈üturucu
    mt_generator = MortalityTableGenerator()

    # Kullanƒ±cƒ±dan dosya yolu al
    print("\nüìÅ Excel Dosyasƒ± Se√ßenekleri:")
    print("1. Kendi Excel dosyanƒ±zƒ±n yolunu girin")
    print("2. √ñrnek veri olu≈ütur ve test et")

    choice = input("\nSe√ßiminiz (1/2): ").strip()

    if choice == "1":
        excel_file = input("Excel dosyasƒ±nƒ±n tam yolunu girin: ").strip().replace('"', '')

        # Dosya var mƒ± kontrol et
        if not Path(excel_file).exists():
            print(f"‚ùå Dosya bulunamadƒ±: {excel_file}")
            return

    else:
        # √ñrnek veri olu≈ütur
        print("\nüìù √ñrnek veri olu≈üturuluyor...")
        excel_file = create_sample_data_interactive()

        if excel_file is None:
            print("‚ùå √ñrnek veri olu≈üturulamadƒ±!")
            return

    print(f"\nüìñ Excel dosyasƒ± okunuyor: {excel_file}")

    # Veriyi oku
    if mt_generator.read_excel_data(excel_file) is not None:

        # Radix deƒüeri al
        radix_input = input(f"\nBa≈ülangƒ±√ß ya≈üayan sayƒ±sƒ± (varsayƒ±lan: 100000): ").strip()
        radix = int(radix_input) if radix_input.isdigit() else 100000

        print(f"\n‚öô  Mortalite tablosu olu≈üturuluyor (radix={radix:,})...")

        # Mortalite tablosunu olu≈ütur
        mortality_table = mt_generator.create_mortality_table(radix=radix)

        if mortality_table is not None:
            print(f"\n‚úÖ Ba≈üarƒ±yla {len(mortality_table)} ya≈ü grubu i√ßin tablo olu≈üturuldu!")

            # Tabloyu g√∂ster
            print(f"\nüìã Tablo √∂nizlemesi:")
            mt_generator.display_table(head=10)

            # √ñzet istatistikler
            print(f"\nüìä √ñzet ƒ∞statistikler:")
            print(f"‚Ä¢ Ya≈ü aralƒ±ƒüƒ±: {int(mortality_table['ya≈ü'].min())}-{int(mortality_table['ya≈ü'].max())}")
            print(f"‚Ä¢ Ortalama √∂l√ºm oranƒ±: {mortality_table['qx'].mean():.6f}")
            max_qx_age = int(mortality_table.loc[mortality_table['qx'].idxmax(), 'ya≈ü'])
            print(f"‚Ä¢ En y√ºksek √∂l√ºm oranƒ±: {mortality_table['qx'].max():.6f} ({max_qx_age} ya≈ü)")

            if 'ex' in mortality_table.columns and not pd.isna(mortality_table.iloc[0]['ex']):
                print(f"‚Ä¢ 0 ya≈ü ya≈üam beklentisi: {mortality_table.iloc[0]['ex']:.2f} yƒ±l")
                age_65_data = mortality_table[mortality_table['ya≈ü'] == 65]
                if len(age_65_data) > 0:
                    ex_65 = age_65_data['ex'].iloc[0]
                    if not pd.isna(ex_65):
                        print(f"‚Ä¢ 65 ya≈ü ya≈üam beklentisi: {ex_65:.2f} yƒ±l")

            # Kaydetme se√ßenekleri
            print(f"\nüíæ Sonu√ßlarƒ± kaydetmek ister misiniz?")
            save_choice = input("Excel dosyasƒ± olarak kaydet? (e/h): ").strip().lower()

            if save_choice in ['e', 'evet', 'y', 'yes']:
                output_file = input("√áƒ±ktƒ± dosya adƒ± (varsayƒ±lan: mortalite_tablosu.xlsx): ").strip()
                if not output_file:
                    output_file = "mortalite_tablosu.xlsx"

                mt_generator.save_to_excel(output_file)

            # Grafik se√ßenekleri
            print(f"\nüìà Grafikleri g√∂r√ºnt√ºlemek ister misiniz?")
            plot_choice = input("Mortalite eƒürilerini √ßiz? (e/h): ").strip().lower()

            if plot_choice in ['e', 'evet', 'y', 'yes']:
                print("üìä Grafikler olu≈üturuluyor...")
                mt_generator.plot_mortality_curves()

            print(f"\nüéâ ƒ∞≈ülem tamamlandƒ±!")

        else:
            print("‚ùå Mortalite tablosu olu≈üturulamadƒ±!")

    else:
        print("‚ùå Excel dosyasƒ± okunamadƒ±. L√ºtfen dosya yolunu ve formatƒ±nƒ± kontrol edin.")
        print("\nüìã Beklenen Excel formatƒ±:")
        print("‚Ä¢ 'ya≈ü' veya 'age' s√ºtunu: 0, 1, 2, ... ya≈ü deƒüerleri")
        print("‚Ä¢ 'qx' s√ºtunu: √ñl√ºm oranlarƒ± (0-1 arasƒ±)")
        print("‚Ä¢ 'lx' s√ºtunu: Ya≈üayan sayƒ±larƒ± (opsiyonel)")
        print("‚Ä¢ 'dx' s√ºtunu: √ñlen sayƒ±larƒ± (opsiyonel)")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã Program kullanƒ±cƒ± tarafƒ±ndan sonlandƒ±rƒ±ldƒ±.")
    except Exception as e:
        print(f"\n‚ùå Beklenmeyen hata: {str(e)}")
        print("\nüîß √á√∂z√ºm √∂nerileri:")
        print("1. Gerekli k√ºt√ºphaneler y√ºkl√º m√º kontrol edin:")
        print("   pip install pandas numpy matplotlib openpyxl")
        print("2. Excel dosyasƒ±nƒ±n formatƒ±nƒ± kontrol edin")
        print("3. Dosya yolunda T√ºrk√ße karakter varsa ƒ∞ngilizce yol deneyin")